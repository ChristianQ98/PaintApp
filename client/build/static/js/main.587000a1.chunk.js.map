{"version":3,"sources":["components/Paint.jsx","App.js","reportWebVitals.js","index.js"],"names":["Paint","props","handlePenWidth","useState","penColor","setPenColor","colorPicker","selectColor","color","localStorage","setItem","className","type","htmlFor","style","display","onClick","id","name","backgroundColor","border","getItem","onInput","e","document","getElementById","value","class","src","alt","padding","maxWidth","min","max","defaultValue","App","canvasRef","useRef","contextRef","isDrawing","setIsDrawing","drawColor","setDrawColor","penWidth","setPenWidth","useEffect","canvas","current","width","height","context","getContext","scale","lineCap","strokeStyle","lineWidth","startDrawing","beginPath","moveTo","clientX","offsetLeft","clientY","offsetTop","preventDefault","stopDrawing","stroke","closePath","draw","lineTo","lineJoin","download","a","image","toDataURL","fetch","blob","blobURL","URL","createObjectURL","link","createElement","href","click","flexDirection","alignItems","justifyContent","margin","onMouseDown","onTouchStart","onMouseMove","onTouchMove","onMouseUp","onMouseOut","onTouchEnd","ref","textAlign","paddingLeft","paddingRight","marginTop","marginLeft","marginRight","cursor","changeColor","fillStyle","clearRect","fillRect","clearCanvas","fontFamily","fontSize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.587000a1.chunk.js","sourcesContent":["import './Paint.modules.css';\r\nimport { useState } from 'react';\r\n\r\nconst Paint = (props) => {\r\n    const { handlePenWidth } = props;\r\n    const [ penColor, setPenColor ] = useState(\r\n        [{ 'color': 'red', 'border': false }],\r\n        [{ 'color': 'blue', 'border': false }],\r\n        [{ 'color': 'green', 'border': false }],\r\n        [{ 'color': 'yellow', 'border': false }]\r\n    );\r\n\r\n    let colorPicker = '';\r\n\r\n    const handleColorPicker = (e) => {\r\n        colorPicker = document.getElementById('color-picker').value;\r\n        localStorage.setItem('penColor', colorPicker);\r\n    }\r\n\r\n    const selectColor = (color) => {\r\n        localStorage.setItem('penColor', color)\r\n        setPenColor([...penColor, {'color': penColor, 'border': true}]);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"paint-tools\">\r\n                <div>\r\n                    <input type=\"radio\" htmlFor=\"red\" style={{display: 'none'}}></input>\r\n                    <label onClick={ () => selectColor('red') } id=\"red\" name=\"red\" className=\"color-field red\" style={{ backgroundColor: 'red', border: localStorage.getItem('penColor') === 'red' ? '3px solid black' : 'None' }}></label>\r\n                    <input type=\"radio\" htmlFor=\"blue\" style={{display: 'none'}}></input>\r\n                    <label onClick={ () => selectColor('blue') } id=\"blue\" name=\"blue\" className=\"color-field blue\" style={{ backgroundColor: \"blue\", border: localStorage.getItem('penColor') === 'blue' ? '3px solid black' : 'None' }}></label>\r\n                    <input type=\"radio\" htmlFor=\"green\" style={{display: 'none'}}></input>\r\n                    <label onClick={ () => selectColor('green') } type=\"radio\" id=\"green\" name=\"green\" className=\"color-field green\" style={{ backgroundColor: \"green\", border: localStorage.getItem('penColor') === 'green' ? '3px solid black' : 'None' }}></label>\r\n                    <input type=\"radio\" htmlFor=\"yellow\" style={{display: 'none'}}></input>\r\n                    <label onClick={ () => selectColor('yellow') } type=\"radio\" id=\"yellow\" name=\"yellow\" className=\"color-field yellow\" style={{ backgroundColor: \"yellow\", border: localStorage.getItem('penColor') === 'yellow' ? '3px solid black' : 'None' }}></label>\r\n\r\n                    <input onInput={ handleColorPicker } id=\"color-picker\" type=\"color\" class=\"color-picker\"></input>\r\n                    {/* Eraser, changes the pen color to white */}\r\n                    <img onClick={ () => selectColor('white') } id=\"erase\" className=\"color-field eraser\" src=\"https://img.icons8.com/color/60/000000/pencil-eraser.png\" alt=\"eraser\" style={{ border: localStorage.getItem('penColor') === 'white' ? '3px solid black' : 'None', padding: '0.3%' }}/>\r\n                    {/* Red color, changes pen color to red if clicked on, and also  */}\r\n                </div>\r\n                <div style={{  }}>\r\n                    <input style={{ maxWidth: '200px' }} onInput={ () => handlePenWidth() } id=\"pen-width\" type=\"range\" min=\"1\" max=\"50\" defaultValue={ handlePenWidth } class=\"pen-width\"></input>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Paint;","import { useEffect, useState, useRef } from 'react';\nimport Paint from './components/Paint';\nimport './App.css';\n\nfunction App() {\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const [ isDrawing, setIsDrawing ] = useState(false);\n  const [ drawColor, setDrawColor ] = useState();\n  const [ penWidth, setPenWidth ] = useState(25);\n\n  // Creates the canvas\n  useEffect(() => {\n      const canvas = canvasRef.current;\n      canvas.width = 1300;\n      canvas.height = 1200;\n      // Half of the canvas.width\n      canvas.style.width = \"650px\";\n      // Half of the canvas.height\n      canvas.style.height = \"600px\";\n      // Allows 2d lines and shapes to be displayed\n      const context = canvas.getContext(\"2d\");\n      context.scale(2, 2);\n      context.lineCap = \"round\";\n      // Pen color will change everytime the pen color in local storage gets changed/updated\n      context.strokeStyle = localStorage.getItem('penColor');\n      // Pen width will change everytime the state of the pen width changes\n      context.lineWidth = penWidth;\n      contextRef.current = context;\n      // eslint-disable-next-line\n  }, []);\n\n  const startDrawing = (e) => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    setIsDrawing(true);\n    context.beginPath();\n    context.moveTo(e.clientX - canvas.offsetLeft,\n      e.clientY - canvas.offsetTop);\n    e.preventDefault();  \n  }\n\n  const stopDrawing = (e) => {\n      const canvas = canvasRef.current;\n      const context = canvas.getContext(\"2d\");\n      if(isDrawing) {\n        context.stroke();\n        context.closePath();\n        setIsDrawing(false);\n      }\n      e.preventDefault();\n  }\n\n  const draw = (e) => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    if(isDrawing) {\n      context.lineTo(e.clientX - canvas.offsetLeft,\n        e.clientY - canvas.offsetTop);\n      context.strokeStyle = localStorage.getItem('penColor');\n      context.lineWidth = penWidth;\n      context.lineCap = \"round\";\n      context.lineJoin = \"round\";\n      context.stroke();\n    }\n    e.preventDefault();\n  }\n\n  let default_background_color = \"white\";\n  // Clears the entire canvas by making the background color entirely white\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    // Fills entire canvas in white\n    context.fillStyle = default_background_color;\n    context.clearRect(0 , 0, canvas.width, canvas.height);\n    context.fillRect(0 , 0, canvas.width, canvas.height);\n  } \n  \n  // Changes the state of drawColor to whichever color gets clicked on\n  const changeColor = (e) => {\n    setDrawColor(e);\n    }\n\n    // Downloads drawing and saves it as an image\n  const download = async() => {\n    const image = canvasRef.current.toDataURL('image/png');\n    const blob = await (await fetch(image)).blob();\n    const blobURL = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = blobURL;\n    link.download = 'image.png';\n    link.click();\n  }\n\n  // Sets state of penWidth to the value of the penWidth range slider\n  const handlePenWidth = (e) => {\n    setPenWidth(document.getElementById('pen-width').value);\n}\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', margin: '0 auto' }}>\n      <canvas\n      id = 'canvas'\n      // When user clicks on their mouse, drawing will start\n        onMouseDown = { startDrawing }\n        // Mobile: When user touches their screen, drawing will start\n        onTouchStart = { startDrawing }\n        // When user moves mouse, drawing will appear on the canvas\n        onMouseMove = { draw }\n        onTouchMove = { draw }\n        // When user is not holding down the left mouse button, drawing will stop\n        onMouseUp = { stopDrawing }\n        // When user mouse is outside the canvas, drawing will stop\n        onMouseOut = { stopDrawing }\n        onTouchEnd = { stopDrawing }\n        ref = { canvasRef }\n        style = {{ border: '3px solid black', textAlign: 'center', paddingLeft: 0, paddingRight: 0, marginTop: '2%', marginLeft: 'auto', marginRight: 'auto', display: 'block', backgroundColor: 'white', cursor: 'crosshair' }}\n      />\n\n      <div className=\"tools\" style = {{ width: '650px', margin: '0 auto', padding: '5px', marginTop: '1%' }}>\n        <div style={{ margin: '0 auto' }}>\n          <Paint changeColor = { changeColor } drawColor = { drawColor } handlePenWidth = { handlePenWidth }/>\n        </div>\n        <div style={{ display: 'flex', justifyContent: 'space-evenly', margin: 'auto', width: '80%', marginTop: '2%' }}>\n          <div>\n            <button onClick={ () => clearCanvas() } className=\"clear\" style = {{ width: '8em', height: '3em', fontFamily: 'DejaVu Sans Mono, monospace', fontSize: '16px' }}>Clear</button>\n          </div>\n          <div>\n            <button onClick={ download } className=\"download\" style = {{ width: '8em', height: '3em', fontFamily: 'DejaVu Sans Mono, monospace', fontSize: '16px' }}>Download</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}